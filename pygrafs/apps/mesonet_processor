#!/usr/bin/env python
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from pygrafs.libs.data.mesonet import MesonetRawData
import matplotlib.pyplot as plt
from multiprocessing import Pool
import traceback
import argparse


def plot_solar_variability():
    start_date = datetime(1994, 1, 1, 23, 0)
    end_date = datetime(1999, 12, 31, 23, 0)
    stations = ["NORM", "SPEN", "MTHE", "BEAV"]
    path = "/idea/mesonet/"
    station_info_file = path + "geoinfo.csv"
    md = MesonetRawData(start_date, end_date, stations, path, station_info_file)
    md.load_data()
    print md.data["NORM"]["SRAD"]
    print md.running_mean("SRAD", 12, 12)
    print md.running_sd("SRAD", 12, 12)
    md.solar_data()
    # clearness_index_mean = md.running_mean("CLRI", 12, 12).dropna()

    clearness_index_sd = md.running_sd("CLRI", 12, 12).dropna()

    def plot_kt_sd_hist(ci_sd, site):
        ci_counts, bx, by = np.histogram2d(ci_sd.index.hour, ci_sd[site],
                                           bins=(np.arange(11.5, 25.5), np.arange(0, 1.0, 0.02)))
        hours = np.arange(13, 24)
        hour_dists = []
        for hour in hours:
            hour_dists.append(ci_sd.loc[ci_sd.index.hour == hour, site])
        plt.figure(figsize=(8, 8))
        plt.pcolormesh(bx[:-1], by[:-1], np.ma.array(ci_counts.T, mask=ci_counts.T == 0), vmin=0,
                       cmap=plt.get_cmap("Reds", 20))
        plt.boxplot(hour_dists, positions=hours)
        plt.xlim(12.5, 23.5)
        plt.ylim(0, 0.3)
        plt.colorbar()
        plt.xticks(np.arange(13, 24))
        plt.xlabel("Hour (UTC)")
        plt.ylabel("Clearness Index Standard Deviation")
        plt.title("Diurnal Clearness Index Variability at {0}".format(site))
        plt.savefig("/Users/djgagne2/ci_figures/kt_sd_{0}.png".format(site), dpi=300, bbox_inches="tight")
        plt.close()

    for station in stations:
        print station
        plot_kt_sd_hist(clearness_index_sd, station)
    return


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-s", "--start", required=True, help="Start Date")
    parser.add_argument("-e", "--end", required=True, help="End Date")
    parser.add_argument("-v", "--var", required=True, help="Variables to process")
    parser.add_argument("-m", "--mesopath", required=True, help="Path to Mesonet files")
    parser.add_argument("-p", "--procs", default=1, type=int, help="Number of processors")
    parser.add_argument("-t", "--meta", required=True, help="Path to metadata files")
    parser.add_argument("-o", "--out", required=True, help="Path to output netCDF files")
    args = parser.parse_args()
    variables = args.var.split(",")
    pool = Pool(args.procs)
    dates = pd.DatetimeIndex(start=args.start, end=args.end, freq="1D")
    stations, station_numbers = get_valid_station_data(args.meta)
    print stations
    print station_numbers
    for date in dates.to_pydatetime():
        pool.apply_async(aggregate_mesonet_data, (date - timedelta(hours=1), date + timedelta(hours=23), stations,
                                                  variables, args.mesopath, args.meta + "geoinfo.csv", args.out,
                                                  station_numbers))
    pool.close()
    pool.join()
    return


def get_valid_station_data(meta_path):
    mesonet_meta = pd.read_csv(meta_path + "geoinfo.csv")
    grafs_meta = pd.read_csv(meta_path + "int_obs_sites.asc", sep=";")
    combined = pd.merge(mesonet_meta, grafs_meta, how="left", left_on="stid", right_on="icao")
    combined = combined.dropna()
    return combined["stid"].values, combined["stationNumber"].values


def aggregate_mesonet_data(start_date, end_date, stations, av_variables, path, station_info_file, nc_path,
                           station_numbers, radiation_var="SRAD"):
    try:
        mrd = MesonetRawData(start_date, end_date, stations, path, station_info_file)
        mrd.load_data()
        mrd.solar_data(radiation_var=radiation_var)
        for variable in av_variables:
            print variable
            mrd.running_mean(variable, 12, 12)
            mrd.running_sd(variable, 12, 12)
        mrd.averaged_data_to_netcdf(nc_path, station_numbers=station_numbers)
    except Exception as e:
        print(traceback.format_exc())
        raise e
    return


if __name__ == "__main__":
    main()
