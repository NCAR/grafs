from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import Pipeline
from sklearn.feature_selection import SelectKBest, f_regression
anova_filter = SelectKBest(f_regression, k=10)
config = dict(
    data_format="csv",
    data_path="/d2/dgagne/merged_data_sw/",
    input_columns=["lon","lat","valid_hour_pst","forecast_hour","day_of_year","sine_doy",
                   "T_f","T_f_mean","T_f_max","T_f_min","T_f_median","T_f_correlate","T_f_gradient",
                   "av_dswrf_sfc_f","av_dswrf_sfc_f_mean","av_dswrf_sfc_f_max","av_dswrf_sfc_f_min",
                   "av_dswrf_sfc_f_median","av_dswrf_sfc_f_correlate","av_dswrf_sfc_f_gradient",
                   "cloud_cover_f","cloud_cover_f_mean","cloud_cover_f_max","cloud_cover_f_min",
                   "cloud_cover_f_median","cloud_cover_f_correlate","cloud_cover_f_gradient",
                   "dewpt_f","dewpt_f_mean","dewpt_f_max","dewpt_f_min",
                   "dewpt_f_median", "dewpt_f_correlate", "dewpt_f_gradient"],
    output_column="av_dswrf_sfc",
    model_names= ["Random Forest","Linear Regression","Gradient Boosting"],
    model_objects = [RandomForestRegressor(n_estimators=100,max_depth=10,max_features='sqrt',n_jobs=10),
                    Pipeline([('anova',anova_filter),('lr',LinearRegression())]),
                    GradientBoostingRegressor(n_estimators=100, loss='lad', max_features='sqrt', max_depth=10)],
    n_folds=5,
    pred_columns=["date","station","lon","lat","forecast_hour","valid_hour_pst","av_dswrf_sfc_f","av_dswrf_sfc"],
    cv_pred_file="/d2/dgagne/cv_predictions/cv_predictions_sw.csv",
    ml_model_path="/d2/dgagne/ml_models_sw/",
    query=["valid_hour_pst > 6", "valid_hour_pst < 20"]
)
