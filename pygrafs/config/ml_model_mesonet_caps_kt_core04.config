#!/usr/bin/env python
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.linear_model import Lasso
from sklearn.pipeline import Pipeline
from sklearn.feature_selection import SelectKBest, f_regression

anova_filter = SelectKBest(f_regression, k=5)
config = dict(
    data_format="csv",
    data_path="/sharp/djgagne/ssef_solar_data_2016/",
    expression="site_data_SSEF_wrf-core04_arw*",
    input_columns=["Forecast_Hour", "CLRI_f", "radsw_mean","radsw_min","radsw_max","radsw_std","radsw_skew","radsw_kurt",
                   "radsw", "raddn", "pwat", "cmpref", "hgtsfc", "rh850", "rh700", "rh500", "accppt",
                   "ETRC_Mean", "azimuth_Mean", "zenith_Mean"],
    site_id_column="Station_ID",
    x_name="Lon",
    y_name="Lat",
    run_date_col="Run_Date",
    forecast_hour_col="Forecast_Hour",
    output_column="CLRI_Mean",
    model_names=["Random Forest Mean", "Random Forest Median", "Linear Regression", "Gradient Boosting Huber", "Gradient Boosting LAD"],
    model_objects=[RandomForestRegressor(n_estimators=500, min_samples_leaf=1, max_features='sqrt', n_jobs=10),
                   RandomForestRegressor(n_estimators=500, min_samples_leaf=1, max_features='sqrt', n_jobs=10),
                   Lasso(alpha=0.5, normalize=False, fit_intercept=True),
                   GradientBoostingRegressor(n_estimators=200, loss='huber', alpha=0.5, max_leaf_nodes=100, subsample=0.8,
                                             learning_rate=0.05),
                   GradientBoostingRegressor(n_estimators=200, loss='lad', max_leaf_nodes=100, subsample=0.8,
                                             learning_rate=0.05)],

    #model_names=["Random Forest", "Linear Regression", "Gradient Boosting"],
    #model_objects=[RandomForestRegressor(n_estimators=200, min_samples_leaf=1, max_features='sqrt', n_jobs=10),
     #              Lasso(alpha=0.1, normalize=False, fit_intercept=True),
                   #Pipeline([('anova', anova_filter), ('lr', Lasso(max_iter=10000))]),
      #             GradientBoostingRegressor(n_estimators=100, loss='huber', alpha=0.5, max_leaf_nodes=100, max_features=None,
      #                                       learning_rate=0.1, subsample=0.8, verbose=2)],
    n_folds=5,
    pred_columns=["Run_Date", "Valid_Date", "Forecast_Hour", "Station_ID", "Lon", "Lat", "Row", "Col",
                  "radsw", "SRAD_Mean", "CLRI_Mean", "ETRC_Mean", "azimuth_Mean", "zenith_Mean"],
    cv_pred_file="/sharp/djgagne/cv_predictions/cv_predictions_mesonet.csv",
    ml_model_path="/sharp/djgagne/ml_models_caps/",
    test_day_interval=3,
    site_pred_file="/sharp/djgagne/site_predictions/site_predictions_caps_kt_merged_core04.csv",
    random_seed=5005,
    grouping_level="merged",
    interp_method="weighted",
)
